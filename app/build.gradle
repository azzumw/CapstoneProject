apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply plugin: 'androidx.navigation.safeargs'

android {
    compileSdkVersion 30

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    defaultConfig {
        applicationId 'com.example.android.politicalpreparedness'
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        buildConfigField 'String', 'MAPS_API_KEY', myApiKey
        manifestPlaceholders = [myMapApiKey: myApiKey]
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

//    androidExtensions {
//        experimental = true
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests{
            includeAndroidResources = true
            returnDefaultValues = true
        }

    }

//        https://stackoverflow.com/questions/72218645/shared-srcdirs-between-test-and-androidtest-unresolved-references-after-upgrade?noredirect=1&lq=1

//    sourceSets {
//        String sharedTestDir = 'src/sharedTest/java'
//        test {
//            java.srcDirs += sharedTestDir
//            resources.srcDirs += 'src/sharedTest/resources'
//        }
//        androidTest {
//            java.srcDirs += sharedTestDir
//        }
//    }
    //https://blog.danlew.net/2022/08/16/sharing-code-between-test-modules/


}

dependencies {
    androidTestUtil 'androidx.test:orchestrator:1.4.2'
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$version_kotlin"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$version_kotlin"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_kotlin_coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_kotlin_coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$version_kotlin_serialization"

//    implementation 'com.google.android.material:material:1.6.1'
    // Constraint Layout
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$version_lifecycle_extensions"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.1"
    // Kotlin
//    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$savedStateVersion"
//    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:1.0.0-alpha02'


    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$version_navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$version_navigation"

    // Core with Ktx
    implementation "androidx.core:core-ktx:$version_core"
//    implementation "androidx.core:core-ktx:1.9.0"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit: $version_retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$version_retrofit"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$version_retrofit_coroutines_adapter"
//    implementation("com.squareup.okhttp3:logging-interceptor:4.10.0")

    // Retrofit with Moshi Converter returns json as a string
    implementation "com.squareup.retrofit2:converter-scalars:2.9.0"
    // Moshi
    implementation "com.squareup.moshi:moshi:$version_moshi"
    implementation "com.squareup.moshi:moshi-kotlin:$version_moshi"
    implementation "com.squareup.moshi:moshi-adapters:$version_moshi"

    // Glide
    implementation "com.github.bumptech.glide:glide:$version_glide"

    //Location
    implementation "com.google.android.gms:play-services-location:$version_play_services_location"

    //Room
    implementation "androidx.room:room-runtime:$version_room"
    testImplementation project(path: ':app')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation project(path: ':app')
    kapt "androidx.room:room-compiler:$version_room"
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$version_room"
    implementation("androidx.room:room-guava:$version_room")
    // To use Kotlin Symbol Processing (KSP)
//    ksp("androidx.room:room-compiler:$version_room")


//    testImplementation project(path: ':app')
//    androidTestImplementation project(path: ':app')

    implementation("androidx.test.espresso:espresso-idling-resource:3.5.1")
    implementation("androidx.test.espresso.idling:idling-concurrent:3.5.1")

    //dependencies for Android Instrumentation tests

    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
    androidTestImplementation("androidx.test.espresso:espresso-contrib:3.5.1")
    androidTestImplementation("androidx.test.espresso:espresso-intents:3.5.1")


    //livedata
    androidTestImplementation "androidx.arch.core:core-testing:$archTestingVersion"

    // Dependencies for Android instrumented unit tests
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    //Mockito
    androidTestImplementation "org.mockito:mockito-core:$version_mockito"
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.28.3'

    //Room for testing
//    testImplementation "androidx.arch.persistence.room:testing:$version_room"
    // optional - Test helpers
    androidTestImplementation("androidx.room:room-testing:$version_room")

    // Use to implement UIAutomator tests
    androidTestImplementation("androidx.test.uiautomator:uiautomator:2.3.0-alpha02")

    debugImplementation("androidx.fragment:fragment-testing:1.3.0-alpha08")
    debugImplementation "androidx.test:core:$androidXTestCoreVersion"

    debugImplementation "androidx.test:monitor:1.6.1"

    //unit tests dependencies
    testImplementation("junit:junit:$junitVersion")

    //roboelectric
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "androidx.test:core-ktx:$androidXTestCoreVersion"
    testImplementation "androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion"

    //corourintes
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    // AndroidX Test - JVM testing
    testImplementation "androidx.test:rules:1.5.0"

    //livedata
    testImplementation "androidx.arch.core:core-testing:$archTestingVersion"

    testImplementation("org.hamcrest:hamcrest-all:$hamcrestVersion")
    //room
    testImplementation "android.arch.persistence.room:testing:$version_room"

    // Testing code should not be included in the main code.
    // Once https://issuetracker.google.com/128612536 is fixed this can be fixed.

    //Note: debugImplementation is used here so that the empty activity that
    // FragmentScenario relies on is accessible by the test target process.
//    debugImplementation('androidx.fragment:fragment-testing-manifest:1.6.0-alpha04')


//    debugImplementation "androidx.fragment:fragment-testing-manifest:1.6.0-alpha04"
//    debugImplementation ("androidx.fragment:fragment-testing:1.6.0-alpha04")


}
